paths:
  /vote/rights/{event_name}/{studentid}:
    get: # GET /vote/:event_name/:studentid
      tags: [Vote]
      summary: Get user's votes rights
      produces: application/json
      security: []
      parameters:
        - name: token
          in: header
          description: jwt token after logged in
          required: true
          schema:
            type: string
        - name: event_name
          in: path
          description: the event name
          required: true
          schema:
            type: string
        - name: studentid
          in: path
          description: the student id
          required: true
          schema:
            type: string
      responses:
        "200": # Success
          description: Found votes
          content:
            application/json:
              schema:
                type: object
                properties:
                  isVoted:
                    type: boolean
                    example: false
                    description: the user's rights
                  msg:
                    type: string
                    example: found votes
                    description: found votes
        "401": # Unauthorized
          description: Unauthorized user
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: unauthorized user
                    description: unauthorized user
        "404": # Not Found
          description: Login Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: not found votes
                    description: not found votes
  /vote/{event_name}:
    get: # GET /vote/:event_name
      tags: [Vote]
      summary: Get user's votes result
      produces: application/json
      parameters:
        - name: token
          in: header
          description: jwt token after logged in
          required: true
          schema:
            type: string
        - name: event_name
          in: path
          description: the event name
          required: true
          schema:
            type: string
      responses:
        "200": # Success
          description: Found votes
          content:
            application/json:
              schema:
                type: object
                properties:
                  vote:
                    type: array
                    example: ["1", "2"]
                    description: user's votes as array
                  msg:
                    type: string
                    example: found votes
                    description: found votes
        "401": # Unauthorized
          description: Unauthorized user
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: unauthorized user
                    description: unauthorized user
        "404": # Not Found
          description: Login Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: not found votes
                    description: not found votes
  /vote:
    post: # POST /vote
      tags: [Vote]
      summary: Insert user's votes to database
      produces: application/json
      parameters:
        - name: token
          in: header
          description: jwt token after logged in
          required: true
          schema:
            type: string
        - name: event_name
          description: the event name
          required: true
          schema:
            type: string
        - name: votes
          description: user's votes
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200": # Success
          description: Successfully insert user's votes to database
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: found votes
                    description: found votes
        "400": # Bad Request
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: bad request
                    description: bad request
        "401": # Unauthorized
          description: Unauthorized user
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: unauthorized user
                    description: unauthorized user
    patch: # PATCH /vote
      tags: [Vote]
      summary: Update user's votes to database
      produces: application/json
      parameters:
        - name: token
          in: header
          description: jwt token after logged in
          required: true
          schema:
            type: string
        - name: event_name
          description: the event name
          required: true
          schema:
            type: string
        - name: votes
          description: user's votes
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200": # Success
          description: Successfully update user's votes to database
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: updated votes
                    description: updated votes
        "400": # Bad Request
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: bad request
                    description: bad request
        "401": # Unauthorized
          description: Unauthorized user
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: unauthorized user
                    description: unauthorized user
    delete: # DELETE /vote
      tags: [Vote]
      summary: Delete user's votes to database
      produces: application/json
      parameters:
        - name: token
          in: header
          description: jwt token after logged in
          required: true
          schema:
            type: string
        - name: event_name
          description: the event name
          required: true
          schema:
            type: string
      responses:
        "200": # Success
          description: Successfully delete user's votes to database
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: deleted votes
                    description: deleted votes
        "400": # Bad Request
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: bad request
                    description: bad request
        "401": # Unauthorized
          description: Unauthorized user
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: unauthorized user
                    description: unauthorized user
